'use strict';

var _ = require('lodash');
var path = require('path');
var async = require('async');
var webpackDevMiddleware = require('webpack-dev-middleware');
var webpack = require('webpack');
var SingleEntryDependency = require('webpack/lib/dependencies/SingleEntryDependency');

var blocked = [];
var isBlocked = false;

function Plugin(
/* config.webpack */webpackOptions,
/* config.webpackServer */webpackServerOptions,
/* config.webpackMiddleware */webpackMiddlewareOptions,
/* config.basePath */basePath,
/* config.files */files,
/* config.frameworks */frameworks, customFileHandlers, emitter) {
  webpackOptions = _.clone(webpackOptions) || {};
  webpackMiddlewareOptions = _.clone(webpackMiddlewareOptions || webpackServerOptions) || {};

  var applyOptions = Array.isArray(webpackOptions) ? webpackOptions : [webpackOptions];
  var includeIndex = applyOptions.length > 1;

  applyOptions.forEach(function (webpackOptions, index) {
    // The webpack tier owns the watch behavior so we want to force it in the config
    webpackOptions.watch = true;

    // Webpack 2.1.0-beta.7+ will throw in error if both entry and plugins are not specified in options
    // https://github.com/webpack/webpack/commit/b3bc5427969e15fd3663d9a1c57dbd1eb2c94805
    if (!webpackOptions.entry) {
      webpackOptions.entry = function () {
        return {};
      };
    };

    if (!webpackOptions.output) {
      webpackOptions.output = {};
    };

    // When using an array, even of length 1, we want to include the index value for the build.
    // This is due to the way that the dev server exposes commonPath for build output.
    var indexPath = includeIndex ? index + '/' : '';
    var publicPath = indexPath !== '' ? indexPath + '/' : '';

    // Must have the common _karma_webpack_ prefix on path here to avoid
    // https://github.com/webpack/webpack/issues/645
    webpackOptions.output.path = '/_karma_webpack_/' + indexPath;
    webpackOptions.output.publicPath = '/_karma_webpack_/' + publicPath;
    webpackOptions.output.filename = '[name]';
    if (includeIndex) {
      webpackOptions.output.jsonpFunction = 'webpackJsonp' + index;
    }
    webpackOptions.output.chunkFilename = '[id].bundle.js';
  });

  this.emitter = emitter;
  this.wrapMocha = frameworks.indexOf('mocha') >= 0 && includeIndex;
  this.optionsCount = applyOptions.length;
  this.files = [];
  this.basePath = basePath;
  this.waiting = [];

  var compiler;
  try {
    compiler = webpack(webpackOptions);
  } catch (e) {
    console.error(e.stack || e);
    if (e.details) {
      console.error(e.details);
    }
    throw e;
  }

  var applyPlugins = compiler.compilers || [compiler];

  applyPlugins.forEach(function (compiler) {
    compiler.plugin('this-compilation', function (compilation, params) {
      compilation.dependencyFactories.set(SingleEntryDependency, params.normalModuleFactory);
    });
    compiler.plugin('make', this.make.bind(this));
  }, this);

  ['invalid', 'watch-run', 'run'].forEach(function (name) {
    compiler.plugin(name, function (_, callback) {
      isBlocked = true;

      if (typeof callback === 'function') {
        callback();
      }
    });
  });

  compiler.plugin('done', function (stats) {
    var applyStats = Array.isArray(stats.stats) ? stats.stats : [stats];
    var assets = [];
    var noAssets = false;

    applyStats.forEach(function (stats) {
      stats = stats.toJson();

      assets.push.apply(assets, stats.assets);
      if (stats.assets.length === 0) {
        noAssets = true;
      }
    });

    if (!this.waiting || this.waiting.length === 0) {
      this.notifyKarmaAboutChanges();
    }

    if (this.waiting && !noAssets) {
      var w = this.waiting;

      this.waiting = null;
      w.forEach(function (cb) {
        cb();
      });
    }

    isBlocked = false;
    for (var i = 0; i < blocked.length; i++) {
      blocked[i]();
    }
    blocked = [];
  }.bind(this));
  compiler.plugin('invalid', function () {
    if (!this.waiting) {
      this.waiting = [];
    }
  }.bind(this));

  webpackMiddlewareOptions.publicPath = '/_karma_webpack_/';
  var middleware = this.middleware = new webpackDevMiddleware(compiler, webpackMiddlewareOptions);

  customFileHandlers.push({
    urlRegex: /^\/_karma_webpack_\/.*/,
    handler: function handler(req, res) {
      middleware(req, res, function () {
        res.statusCode = 404;
        res.end('Not found');
      });
    }
  });

  emitter.on('exit', function (done) {
    middleware.close();
    done();
  });
}

Plugin.prototype.notifyKarmaAboutChanges = function () {
  // Force a rebuild
  this.emitter.refreshFiles();
};

Plugin.prototype.addFile = function (entry) {
  if (this.files.indexOf(entry) >= 0) {
    return;
  }
  this.files.push(entry);

  return true;
};

Plugin.prototype.make = function (compilation, callback) {
  async.forEach(this.files.slice(), function (file, callback) {
    var entry = file;

    if (this.wrapMocha) {
      entry = require.resolve('./mocha-env-loader') + '!' + entry;
    }

    var dep = new SingleEntryDependency(entry);

    compilation.addEntry('', dep, path.relative(this.basePath, file).replace(/\\/g, '/'), function () {
      // If the module fails because of an File not found error, remove the test file
      if (dep.module && dep.module.error && dep.module.error.error && dep.module.error.error.code === 'ENOENT') {
        this.files = this.files.filter(function (f) {
          return file !== f;
        });
        this.middleware.invalidate();
      }
      callback();
    }.bind(this));
  }.bind(this), callback);
};

Plugin.prototype.readFile = function (file, callback) {
  var middleware = this.middleware;
  var optionsCount = this.optionsCount;

  var doRead = function () {
    if (optionsCount > 1) {
      async.times(optionsCount, function (idx, callback) {
        middleware.fileSystem.readFile('/_karma_webpack_/' + idx + '/' + file.replace(/\\/g, '/'), callback);
      }, function (err, contents) {
        if (err) {
          return callback(err);
        };
        contents = contents.reduce(function (arr, x) {
          if (!arr) {
            return [x];
          };
          arr.push(new Buffer('\n'), x);

          return arr;
        }, null);
        callback(null, Buffer.concat(contents));
      });
    } else {
      try {
        var fileContents = middleware.fileSystem.readFileSync('/_karma_webpack_/' + file.replace(/\\/g, '/'));

        callback(undefined, fileContents);
      } catch (e) {
        // If this is an error from `readFileSync` method, wait for the next tick.
        // Credit #69 @mewdriller
        if (e.code === 'ENOENT') {
          // eslint-disable-line quotes
          this.waiting = [process.nextTick.bind(process, this.readFile.bind(this, file, callback))];

          // throw otherwise
        } else {
          callback(e);
        }
      }
    }
  }.bind(this);

  if (!this.waiting) {
    doRead();
  } else {
    // Retry to read once a build is finished
    // do it on process.nextTick to catch changes while building
    this.waiting.push(process.nextTick.bind(process, this.readFile.bind(this, file, callback)));
  }
};

function createPreprocesor( /* config.basePath */basePath, webpackPlugin) {
  return function (content, file, done) {
    if (webpackPlugin.addFile(file.path)) {
      // recompile as we have an asset that we have not seen before
      webpackPlugin.middleware.invalidate();
    }

    // read blocks until bundle is done
    webpackPlugin.readFile(path.relative(basePath, file.path), function (err, content) {
      if (err) {
        throw err;
      }

      done(err, content && content.toString());
    });
  };
}

function createWebpackBlocker() {
  return function (request, response, next) {
    if (isBlocked) {
      blocked.push(next);
    } else {
      next();
    }
  };
}

module.exports = {
  webpackPlugin: ['type', Plugin],
  'preprocessor:webpack': ['factory', createPreprocesor],
  'middleware:webpackBlocker': ['factory', createWebpackBlocker]
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImthcm1hLXdlYnBhY2suanMiXSwibmFtZXMiOlsiXyIsInJlcXVpcmUiLCJwYXRoIiwiYXN5bmMiLCJ3ZWJwYWNrRGV2TWlkZGxld2FyZSIsIndlYnBhY2siLCJTaW5nbGVFbnRyeURlcGVuZGVuY3kiLCJibG9ja2VkIiwiaXNCbG9ja2VkIiwiUGx1Z2luIiwid2VicGFja09wdGlvbnMiLCJ3ZWJwYWNrU2VydmVyT3B0aW9ucyIsIndlYnBhY2tNaWRkbGV3YXJlT3B0aW9ucyIsImJhc2VQYXRoIiwiZmlsZXMiLCJmcmFtZXdvcmtzIiwiY3VzdG9tRmlsZUhhbmRsZXJzIiwiZW1pdHRlciIsImNsb25lIiwiYXBwbHlPcHRpb25zIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5jbHVkZUluZGV4IiwibGVuZ3RoIiwiZm9yRWFjaCIsImluZGV4Iiwid2F0Y2giLCJlbnRyeSIsIm91dHB1dCIsImluZGV4UGF0aCIsInB1YmxpY1BhdGgiLCJmaWxlbmFtZSIsImpzb25wRnVuY3Rpb24iLCJjaHVua0ZpbGVuYW1lIiwid3JhcE1vY2hhIiwiaW5kZXhPZiIsIm9wdGlvbnNDb3VudCIsIndhaXRpbmciLCJjb21waWxlciIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJzdGFjayIsImRldGFpbHMiLCJhcHBseVBsdWdpbnMiLCJjb21waWxlcnMiLCJwbHVnaW4iLCJjb21waWxhdGlvbiIsInBhcmFtcyIsImRlcGVuZGVuY3lGYWN0b3JpZXMiLCJzZXQiLCJub3JtYWxNb2R1bGVGYWN0b3J5IiwibWFrZSIsImJpbmQiLCJuYW1lIiwiY2FsbGJhY2siLCJzdGF0cyIsImFwcGx5U3RhdHMiLCJhc3NldHMiLCJub0Fzc2V0cyIsInRvSnNvbiIsInB1c2giLCJhcHBseSIsIm5vdGlmeUthcm1hQWJvdXRDaGFuZ2VzIiwidyIsImNiIiwiaSIsIm1pZGRsZXdhcmUiLCJ1cmxSZWdleCIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJzdGF0dXNDb2RlIiwiZW5kIiwib24iLCJkb25lIiwiY2xvc2UiLCJwcm90b3R5cGUiLCJyZWZyZXNoRmlsZXMiLCJhZGRGaWxlIiwic2xpY2UiLCJmaWxlIiwicmVzb2x2ZSIsImRlcCIsImFkZEVudHJ5IiwicmVsYXRpdmUiLCJyZXBsYWNlIiwibW9kdWxlIiwiY29kZSIsImZpbHRlciIsImYiLCJpbnZhbGlkYXRlIiwicmVhZEZpbGUiLCJkb1JlYWQiLCJ0aW1lcyIsImlkeCIsImZpbGVTeXN0ZW0iLCJlcnIiLCJjb250ZW50cyIsInJlZHVjZSIsImFyciIsIngiLCJCdWZmZXIiLCJjb25jYXQiLCJmaWxlQ29udGVudHMiLCJyZWFkRmlsZVN5bmMiLCJ1bmRlZmluZWQiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJjcmVhdGVQcmVwcm9jZXNvciIsIndlYnBhY2tQbHVnaW4iLCJjb250ZW50IiwidG9TdHJpbmciLCJjcmVhdGVXZWJwYWNrQmxvY2tlciIsInJlcXVlc3QiLCJyZXNwb25zZSIsIm5leHQiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLElBQUlBLElBQUlDLFFBQVEsUUFBUixDQUFSO0FBQ0EsSUFBSUMsT0FBT0QsUUFBUSxNQUFSLENBQVg7QUFDQSxJQUFJRSxRQUFRRixRQUFRLE9BQVIsQ0FBWjtBQUNBLElBQUlHLHVCQUF1QkgsUUFBUSx3QkFBUixDQUEzQjtBQUNBLElBQUlJLFVBQVVKLFFBQVEsU0FBUixDQUFkO0FBQ0EsSUFBSUssd0JBQXdCTCxRQUFRLGdEQUFSLENBQTVCOztBQUVBLElBQUlNLFVBQVUsRUFBZDtBQUNBLElBQUlDLFlBQVksS0FBaEI7O0FBRUEsU0FBU0MsTUFBVDtBQUNDLG9CQUFxQkMsY0FEdEI7QUFFQywwQkFBMkJDLG9CQUY1QjtBQUdDLDhCQUErQkMsd0JBSGhDO0FBSUMscUJBQXNCQyxRQUp2QjtBQUtDLGtCQUFtQkMsS0FMcEI7QUFNQyx1QkFBd0JDLFVBTnpCLEVBT0NDLGtCQVBELEVBUUNDLE9BUkQsRUFTRTtBQUNBUCxtQkFBaUJWLEVBQUVrQixLQUFGLENBQVFSLGNBQVIsS0FBMkIsRUFBNUM7QUFD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QUFLL0UsSUFBN0IsQ0FBdkIsRUFBMkQsVUFBUytGLEdBQVQsRUFBY2MsT0FBZCxFQUF1QjtBQUNoRixVQUFJZCxHQUFKLEVBQVM7QUFDUCxjQUFNQSxHQUFOO0FBQ0Q7O0FBRUR0QixXQUFLc0IsR0FBTCxFQUFVYyxXQUFXQSxRQUFRQyxRQUFSLEVBQXJCO0FBQ0QsS0FORDtBQU9ELEdBZEQ7QUFlRDs7QUFFRCxTQUFTQyxvQkFBVCxHQUFnQztBQUM5QixTQUFPLFVBQVNDLE9BQVQsRUFBa0JDLFFBQWxCLEVBQTRCQyxJQUE1QixFQUFrQztBQUN2QyxRQUFJNUcsU0FBSixFQUFlO0FBQ2JELGNBQVFzRCxJQUFSLENBQWF1RCxJQUFiO0FBQ0QsS0FGRCxNQUVPO0FBQ0xBO0FBQ0Q7QUFDRixHQU5EO0FBT0Q7O0FBRUQ3QixPQUFPOEIsT0FBUCxHQUFpQjtBQUNmUCxpQkFBZSxDQUFDLE1BQUQsRUFBU3JHLE1BQVQsQ0FEQTtBQUVmLDBCQUF3QixDQUFDLFNBQUQsRUFBWW9HLGlCQUFaLENBRlQ7QUFHZiwrQkFBNkIsQ0FBQyxTQUFELEVBQVlJLG9CQUFaO0FBSGQsQ0FBakIiLCJmaWxlIjoia2FybWEtd2VicGFjay5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfID0gcmVxdWlyZSgnbG9kYXNoJylcclxudmFyIHBhdGggPSByZXF1aXJlKCdwYXRoJylcclxudmFyIGFzeW5jID0gcmVxdWlyZSgnYXN5bmMnKVxyXG52YXIgd2VicGFja0Rldk1pZGRsZXdhcmUgPSByZXF1aXJlKCd3ZWJwYWNrLWRldi1taWRkbGV3YXJlJylcclxudmFyIHdlYnBhY2sgPSByZXF1aXJlKCd3ZWJwYWNrJylcclxudmFyIFNpbmdsZUVudHJ5RGVwZW5kZW5jeSA9IHJlcXVpcmUoJ3dlYnBhY2svbGliL2RlcGVuZGVuY2llcy9TaW5nbGVFbnRyeURlcGVuZGVuY3knKVxyXG5cclxudmFyIGJsb2NrZWQgPSBbXVxyXG52YXIgaXNCbG9ja2VkID0gZmFsc2VcclxuXHJcbmZ1bmN0aW9uIFBsdWdpbihcclxuXHQvKiBjb25maWcud2VicGFjayAqLyB3ZWJwYWNrT3B0aW9ucyxcclxuXHQvKiBjb25maWcud2VicGFja1NlcnZlciAqLyB3ZWJwYWNrU2VydmVyT3B0aW9ucyxcclxuXHQvKiBjb25maWcud2VicGFja01pZGRsZXdhcmUgKi8gd2VicGFja01pZGRsZXdhcmVPcHRpb25zLFxyXG5cdC8qIGNvbmZpZy5iYXNlUGF0aCAqLyBiYXNlUGF0aCxcclxuXHQvKiBjb25maWcuZmlsZXMgKi8gZmlsZXMsXHJcblx0LyogY29uZmlnLmZyYW1ld29ya3MgKi8gZnJhbWV3b3JrcyxcclxuXHRjdXN0b21GaWxlSGFuZGxlcnMsXHJcblx0ZW1pdHRlclxyXG4pIHtcclxuICB3ZWJwYWNrT3B0aW9ucyA9IF8uY2xvbmUod2VicGFja09wdGlvbnMpIHx8IHt9XHJcbiAgd2VicGFja01pZGRsZXdhcmVPcHRpb25zID0gXy5jbG9uZSh3ZWJwYWNrTWlkZGxld2FyZU9wdGlvbnMgfHwgd2VicGFja1NlcnZlck9wdGlvbnMpIHx8IHt9XHJcblxyXG4gIHZhciBhcHBseU9wdGlvbnMgPSBBcnJheS5pc0FycmF5KHdlYnBhY2tPcHRpb25zKSA/IHdlYnBhY2tPcHRpb25zIDogW3dlYnBhY2tPcHRpb25zXVxyXG4gIHZhciBpbmNsdWRlSW5kZXggPSBhcHBseU9wdGlvbnMubGVuZ3RoID4gMVxyXG5cclxuICBhcHBseU9wdGlvbnMuZm9yRWFjaChmdW5jdGlvbih3ZWJwYWNrT3B0aW9ucywgaW5kZXgpIHtcclxuICAgIC8vIFRoZSB3ZWJwYWNrIHRpZXIgb3ducyB0aGUgd2F0Y2ggYmVoYXZpb3Igc28gd2Ugd2FudCB0byBmb3JjZSBpdCBpbiB0aGUgY29uZmlnXHJcbiAgICB3ZWJwYWNrT3B0aW9ucy53YXRjaCA9IHRydWVcclxuXHJcbiAgICAvLyBXZWJwYWNrIDIuMS4wLWJldGEuNysgd2lsbCB0aHJvdyBpbiBlcnJvciBpZiBib3RoIGVudHJ5IGFuZCBwbHVnaW5zIGFyZSBub3Qgc3BlY2lmaWVkIGluIG9wdGlvbnNcclxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2svY29tbWl0L2IzYmM1NDI3OTY5ZTE1ZmQzNjYzZDlhMWM1N2RiZDFlYjJjOTQ4MDVcclxuICAgIGlmICghd2VicGFja09wdGlvbnMuZW50cnkpIHtcclxuICAgICAgd2VicGFja09wdGlvbnMuZW50cnkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4ge31cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIXdlYnBhY2tPcHRpb25zLm91dHB1dCkge1xyXG4gICAgICB3ZWJwYWNrT3B0aW9ucy5vdXRwdXQgPSB7fVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBXaGVuIHVzaW5nIGFuIGFycmF5LCBldmVuIG9mIGxlbmd0aCAxLCB3ZSB3YW50IHRvIGluY2x1ZGUgdGhlIGluZGV4IHZhbHVlIGZvciB0aGUgYnVpbGQuXHJcbiAgICAvLyBUaGlzIGlzIGR1ZSB0byB0aGUgd2F5IHRoYXQgdGhlIGRldiBzZXJ2ZXIgZXhwb3NlcyBjb21tb25QYXRoIGZvciBidWlsZCBvdXRwdXQuXHJcbiAgICB2YXIgaW5kZXhQYXRoID0gaW5jbHVkZUluZGV4ID8gaW5kZXggKyAnLycgOiAnJ1xyXG4gICAgdmFyIHB1YmxpY1BhdGggPSBpbmRleFBhdGggIT09ICcnID8gaW5kZXhQYXRoICsgJy8nIDogJydcclxuXHJcbiAgICAvLyBNdXN0IGhhdmUgdGhlIGNvbW1vbiBfa2FybWFfd2VicGFja18gcHJlZml4IG9uIHBhdGggaGVyZSB0byBhdm9pZFxyXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2svd2VicGFjay9pc3N1ZXMvNjQ1XHJcbiAgICB3ZWJwYWNrT3B0aW9ucy5vdXRwdXQucGF0aCA9ICcvX2thcm1hX3dlYnBhY2tfLycgKyBpbmRleFBhdGhcclxuICAgIHdlYnBhY2tPcHRpb25zLm91dHB1dC5wdWJsaWNQYXRoID0gJy9fa2FybWFfd2VicGFja18vJyArIHB1YmxpY1BhdGhcclxuICAgIHdlYnBhY2tPcHRpb25zLm91dHB1dC5maWxlbmFtZSA9ICdbbmFtZV0nXHJcbiAgICBpZiAoaW5jbHVkZUluZGV4KSB7XHJcbiAgICAgIHdlYnBhY2tPcHRpb25zLm91dHB1dC5qc29ucEZ1bmN0aW9uID0gJ3dlYnBhY2tKc29ucCcgKyBpbmRleFxyXG4gICAgfVxyXG4gICAgd2VicGFja09wdGlvbnMub3V0cHV0LmNodW5rRmlsZW5hbWUgPSAnW2lkXS5idW5kbGUuanMnXHJcbiAgfSlcclxuXHJcbiAgdGhpcy5lbWl0dGVyID0gZW1pdHRlclxyXG4gIHRoaXMud3JhcE1vY2hhID0gZnJhbWV3b3Jrcy5pbmRleE9mKCdtb2NoYScpID49IDAgJiYgaW5jbHVkZUluZGV4XHJcbiAgdGhpcy5vcHRpb25zQ291bnQgPSBhcHBseU9wdGlvbnMubGVuZ3RoXHJcbiAgdGhpcy5maWxlcyA9IFtdXHJcbiAgdGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoXHJcbiAgdGhpcy53YWl0aW5nID0gW11cclxuXHJcbiAgdmFyIGNvbXBpbGVyXHJcbiAgdHJ5IHtcclxuICAgIGNvbXBpbGVyID0gd2VicGFjayh3ZWJwYWNrT3B0aW9ucylcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGUuc3RhY2sgfHwgZSlcclxuICAgIGlmIChlLmRldGFpbHMpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihlLmRldGFpbHMpXHJcbiAgICB9XHJcbiAgICB0aHJvdyBlXHJcbiAgfVxyXG5cclxuICB2YXIgYXBwbHlQbHVnaW5zID0gY29tcGlsZXIuY29tcGlsZXJzIHx8IFtjb21waWxlcl1cclxuXHJcbiAgYXBwbHlQbHVnaW5zLmZvckVhY2goZnVuY3Rpb24oY29tcGlsZXIpIHtcclxuICAgIGNvbXBpbGVyLnBsdWdpbigndGhpcy1jb21waWxhdGlvbicsIGZ1bmN0aW9uKGNvbXBpbGF0aW9uLCBwYXJhbXMpIHtcclxuICAgICAgY29tcGlsYXRpb24uZGVwZW5kZW5jeUZhY3Rvcmllcy5zZXQoU2luZ2xlRW50cnlEZXBlbmRlbmN5LCBwYXJhbXMubm9ybWFsTW9kdWxlRmFjdG9yeSlcclxuICAgIH0pXHJcbiAgICBjb21waWxlci5wbHVnaW4oJ21ha2UnLCB0aGlzLm1ha2UuYmluZCh0aGlzKSlcclxuICB9LCB0aGlzKTtcclxuXHJcbiAgWydpbnZhbGlkJywgJ3dhdGNoLXJ1bicsICdydW4nXS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcclxuICAgIGNvbXBpbGVyLnBsdWdpbihuYW1lLCBmdW5jdGlvbihfLCBjYWxsYmFjaykge1xyXG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlXHJcblxyXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgY2FsbGJhY2soKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH0pXHJcblxyXG4gIGNvbXBpbGVyLnBsdWdpbignZG9uZScsIGZ1bmN0aW9uKHN0YXRzKSB7XHJcbiAgICB2YXIgYXBwbHlTdGF0cyA9IEFycmF5LmlzQXJyYXkoc3RhdHMuc3RhdHMpID8gc3RhdHMuc3RhdHMgOiBbc3RhdHNdXHJcbiAgICB2YXIgYXNzZXRzID0gW11cclxuICAgIHZhciBub0Fzc2V0cyA9IGZhbHNlXHJcblxyXG4gICAgYXBwbHlTdGF0cy5mb3JFYWNoKGZ1bmN0aW9uKHN0YXRzKSB7XHJcbiAgICAgIHN0YXRzID0gc3RhdHMudG9Kc29uKClcclxuXHJcbiAgICAgIGFzc2V0cy5wdXNoLmFwcGx5KGFzc2V0cywgc3RhdHMuYXNzZXRzKVxyXG4gICAgICBpZiAoc3RhdHMuYXNzZXRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIG5vQXNzZXRzID0gdHJ1ZVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIGlmICghdGhpcy53YWl0aW5nIHx8IHRoaXMud2FpdGluZy5sZW5ndGggPT09IDApIHtcclxuICAgICAgdGhpcy5ub3RpZnlLYXJtYUFib3V0Q2hhbmdlcygpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMud2FpdGluZyAmJiAhbm9Bc3NldHMpIHtcclxuICAgICAgdmFyIHcgPSB0aGlzLndhaXRpbmdcclxuXHJcbiAgICAgIHRoaXMud2FpdGluZyA9IG51bGxcclxuICAgICAgdy5mb3JFYWNoKGZ1bmN0aW9uKGNiKSB7XHJcbiAgICAgICAgY2IoKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGlzQmxvY2tlZCA9IGZhbHNlXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrZWQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgYmxvY2tlZFtpXSgpXHJcbiAgICB9XHJcbiAgICBibG9ja2VkID0gW11cclxuICB9LmJpbmQodGhpcykpXHJcbiAgY29tcGlsZXIucGx1Z2luKCdpbnZhbGlkJywgZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoIXRoaXMud2FpdGluZykge1xyXG4gICAgICB0aGlzLndhaXRpbmcgPSBbXVxyXG4gICAgfVxyXG4gIH0uYmluZCh0aGlzKSlcclxuXHJcbiAgd2VicGFja01pZGRsZXdhcmVPcHRpb25zLnB1YmxpY1BhdGggPSAnL19rYXJtYV93ZWJwYWNrXy8nXHJcbiAgdmFyIG1pZGRsZXdhcmUgPSB0aGlzLm1pZGRsZXdhcmUgPSBuZXcgd2VicGFja0Rldk1pZGRsZXdhcmUoY29tcGlsZXIsIHdlYnBhY2tNaWRkbGV3YXJlT3B0aW9ucylcclxuXHJcbiAgY3VzdG9tRmlsZUhhbmRsZXJzLnB1c2goe1xyXG4gICAgdXJsUmVnZXg6IC9eXFwvX2thcm1hX3dlYnBhY2tfXFwvLiovLFxyXG4gICAgaGFuZGxlcjogZnVuY3Rpb24ocmVxLCByZXMpIHtcclxuICAgICAgbWlkZGxld2FyZShyZXEsIHJlcywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmVzLnN0YXR1c0NvZGUgPSA0MDRcclxuICAgICAgICByZXMuZW5kKCdOb3QgZm91bmQnKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH0pXHJcblxyXG4gIGVtaXR0ZXIub24oJ2V4aXQnLCBmdW5jdGlvbihkb25lKSB7XHJcbiAgICBtaWRkbGV3YXJlLmNsb3NlKClcclxuICAgIGRvbmUoKVxyXG4gIH0pXHJcbn1cclxuXHJcblBsdWdpbi5wcm90b3R5cGUubm90aWZ5S2FybWFBYm91dENoYW5nZXMgPSBmdW5jdGlvbigpIHtcclxuICAvLyBGb3JjZSBhIHJlYnVpbGRcclxuICB0aGlzLmVtaXR0ZXIucmVmcmVzaEZpbGVzKClcclxufVxyXG5cclxuUGx1Z2luLnByb3RvdHlwZS5hZGRGaWxlID0gZnVuY3Rpb24oZW50cnkpIHtcclxuICBpZiAodGhpcy5maWxlcy5pbmRleE9mKGVudHJ5KSA+PSAwKSB7XHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgdGhpcy5maWxlcy5wdXNoKGVudHJ5KVxyXG5cclxuICByZXR1cm4gdHJ1ZVxyXG59XHJcblxyXG5QbHVnaW4ucHJvdG90eXBlLm1ha2UgPSBmdW5jdGlvbihjb21waWxhdGlvbiwgY2FsbGJhY2spIHtcclxuICBhc3luYy5mb3JFYWNoKHRoaXMuZmlsZXMuc2xpY2UoKSwgZnVuY3Rpb24oZmlsZSwgY2FsbGJhY2spIHtcclxuICAgIHZhciBlbnRyeSA9IGZpbGVcclxuXHJcbiAgICBpZiAodGhpcy53cmFwTW9jaGEpIHtcclxuICAgICAgZW50cnkgPSByZXF1aXJlLnJlc29sdmUoJy4vbW9jaGEtZW52LWxvYWRlcicpICsgJyEnICsgZW50cnlcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGVwID0gbmV3IFNpbmdsZUVudHJ5RGVwZW5kZW5jeShlbnRyeSlcclxuXHJcbiAgICBjb21waWxhdGlvbi5hZGRFbnRyeSgnJywgZGVwLCBwYXRoLnJlbGF0aXZlKHRoaXMuYmFzZVBhdGgsIGZpbGUpLnJlcGxhY2UoL1xcXFwvZywgJy8nKSwgZnVuY3Rpb24oKSB7XHJcbiAgICAgIC8vIElmIHRoZSBtb2R1bGUgZmFpbHMgYmVjYXVzZSBvZiBhbiBGaWxlIG5vdCBmb3VuZCBlcnJvciwgcmVtb3ZlIHRoZSB0ZXN0IGZpbGVcclxuICAgICAgaWYgKGRlcC5tb2R1bGUgJiYgZGVwLm1vZHVsZS5lcnJvciAmJlxyXG4gICAgICAgIGRlcC5tb2R1bGUuZXJyb3IuZXJyb3IgJiZcclxuICAgICAgICBkZXAubW9kdWxlLmVycm9yLmVycm9yLmNvZGUgPT09ICdFTk9FTlQnKSB7XHJcbiAgICAgICAgdGhpcy5maWxlcyA9IHRoaXMuZmlsZXMuZmlsdGVyKGZ1bmN0aW9uKGYpIHtcclxuICAgICAgICAgIHJldHVybiBmaWxlICE9PSBmXHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLm1pZGRsZXdhcmUuaW52YWxpZGF0ZSgpXHJcbiAgICAgIH1cclxuICAgICAgY2FsbGJhY2soKVxyXG4gICAgfS5iaW5kKHRoaXMpKVxyXG4gIH0uYmluZCh0aGlzKSwgY2FsbGJhY2spXHJcbn1cclxuXHJcblBsdWdpbi5wcm90b3R5cGUucmVhZEZpbGUgPSBmdW5jdGlvbihmaWxlLCBjYWxsYmFjaykge1xyXG4gIHZhciBtaWRkbGV3YXJlID0gdGhpcy5taWRkbGV3YXJlXHJcbiAgdmFyIG9wdGlvbnNDb3VudCA9IHRoaXMub3B0aW9uc0NvdW50XHJcblxyXG4gIHZhciBkb1JlYWQgPSBmdW5jdGlvbigpIHtcclxuICAgIGlmIChvcHRpb25zQ291bnQgPiAxKSB7XHJcbiAgICAgIGFzeW5jLnRpbWVzKG9wdGlvbnNDb3VudCwgZnVuY3Rpb24oaWR4LCBjYWxsYmFjaykge1xyXG4gICAgICAgIG1pZGRsZXdhcmUuZmlsZVN5c3RlbS5yZWFkRmlsZSgnL19rYXJtYV93ZWJwYWNrXy8nICsgaWR4ICsgJy8nICsgZmlsZS5yZXBsYWNlKC9cXFxcL2csICcvJyksIGNhbGxiYWNrKVxyXG4gICAgICB9LCBmdW5jdGlvbihlcnIsIGNvbnRlbnRzKSB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycilcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnRlbnRzID0gY29udGVudHMucmVkdWNlKGZ1bmN0aW9uKGFyciwgeCkge1xyXG4gICAgICAgICAgaWYgKCFhcnIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFt4XVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGFyci5wdXNoKG5ldyBCdWZmZXIoJ1xcbicpLCB4KVxyXG5cclxuICAgICAgICAgIHJldHVybiBhcnJcclxuICAgICAgICB9LCBudWxsKVxyXG4gICAgICAgIGNhbGxiYWNrKG51bGwsIEJ1ZmZlci5jb25jYXQoY29udGVudHMpKVxyXG4gICAgICB9KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2YXIgZmlsZUNvbnRlbnRzID0gbWlkZGxld2FyZS5maWxlU3lzdGVtLnJlYWRGaWxlU3luYygnL19rYXJtYV93ZWJwYWNrXy8nICsgZmlsZS5yZXBsYWNlKC9cXFxcL2csICcvJykpXHJcblxyXG4gICAgICAgIGNhbGxiYWNrKHVuZGVmaW5lZCwgZmlsZUNvbnRlbnRzKVxyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhbiBlcnJvciBmcm9tIGByZWFkRmlsZVN5bmNgIG1ldGhvZCwgd2FpdCBmb3IgdGhlIG5leHQgdGljay5cclxuICAgICAgICAvLyBDcmVkaXQgIzY5IEBtZXdkcmlsbGVyXHJcbiAgICAgICAgaWYgKGUuY29kZSA9PT0gJ0VOT0VOVCcpIHtcclxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcXVvdGVzXHJcbiAgICAgICAgICB0aGlzLndhaXRpbmcgPSBbcHJvY2Vzcy5uZXh0VGljay5iaW5kKHByb2Nlc3MsIHRoaXMucmVhZEZpbGUuYmluZCh0aGlzLCBmaWxlLCBjYWxsYmFjaykpXVxyXG5cclxuICAgICAgICAgIC8vIHRocm93IG90aGVyd2lzZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjYWxsYmFjayhlKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0uYmluZCh0aGlzKVxyXG5cclxuICBpZiAoIXRoaXMud2FpdGluZykge1xyXG4gICAgZG9SZWFkKClcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gUmV0cnkgdG8gcmVhZCBvbmNlIGEgYnVpbGQgaXMgZmluaXNoZWRcclxuICAgIC8vIGRvIGl0IG9uIHByb2Nlc3MubmV4dFRpY2sgdG8gY2F0Y2ggY2hhbmdlcyB3aGlsZSBidWlsZGluZ1xyXG4gICAgdGhpcy53YWl0aW5nLnB1c2gocHJvY2Vzcy5uZXh0VGljay5iaW5kKHByb2Nlc3MsIHRoaXMucmVhZEZpbGUuYmluZCh0aGlzLCBmaWxlLCBjYWxsYmFjaykpKVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUHJlcHJvY2Vzb3IoLyogY29uZmlnLmJhc2VQYXRoICovIGJhc2VQYXRoLCB3ZWJwYWNrUGx1Z2luKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbnRlbnQsIGZpbGUsIGRvbmUpIHtcclxuICAgIGlmICh3ZWJwYWNrUGx1Z2luLmFkZEZpbGUoZmlsZS5wYXRoKSkge1xyXG4gICAgICAvLyByZWNvbXBpbGUgYXMgd2UgaGF2ZSBhbiBhc3NldCB0aGF0IHdlIGhhdmUgbm90IHNlZW4gYmVmb3JlXHJcbiAgICAgIHdlYnBhY2tQbHVnaW4ubWlkZGxld2FyZS5pbnZhbGlkYXRlKClcclxuICAgIH1cclxuXHJcbiAgICAvLyByZWFkIGJsb2NrcyB1bnRpbCBidW5kbGUgaXMgZG9uZVxyXG4gICAgd2VicGFja1BsdWdpbi5yZWFkRmlsZShwYXRoLnJlbGF0aXZlKGJhc2VQYXRoLCBmaWxlLnBhdGgpLCBmdW5jdGlvbihlcnIsIGNvbnRlbnQpIHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgIHRocm93IGVyclxyXG4gICAgICB9XHJcblxyXG4gICAgICBkb25lKGVyciwgY29udGVudCAmJiBjb250ZW50LnRvU3RyaW5nKCkpXHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlV2VicGFja0Jsb2NrZXIoKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKHJlcXVlc3QsIHJlc3BvbnNlLCBuZXh0KSB7XHJcbiAgICBpZiAoaXNCbG9ja2VkKSB7XHJcbiAgICAgIGJsb2NrZWQucHVzaChuZXh0KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV4dCgpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICB3ZWJwYWNrUGx1Z2luOiBbJ3R5cGUnLCBQbHVnaW5dLFxyXG4gICdwcmVwcm9jZXNzb3I6d2VicGFjayc6IFsnZmFjdG9yeScsIGNyZWF0ZVByZXByb2Nlc29yXSxcclxuICAnbWlkZGxld2FyZTp3ZWJwYWNrQmxvY2tlcic6IFsnZmFjdG9yeScsIGNyZWF0ZVdlYnBhY2tCbG9ja2VyXVxyXG59XHJcbiJdfQ==